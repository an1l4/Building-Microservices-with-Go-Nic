Chapter-1
**************
You can check that you do not have another instance runningby checking the running processes:

$ ps -aux | grep 'go run'
---------------------------------------------------------------------------------------------------
This is exactly what we want, but we can use field tags to control the output even further.
We can convert object types and even ignore a field altogether if we need to:

type helloWorldResponse struct {
    // change the output field to be "message"   
    Message   string `json:"message"`   
    // do not output this field   
    Author  string `json:"-"`   
    // do not output the field if the value is empty   
    Date    string `json:",omitempty"`   
    // convert output to a string and rename "id"   
    Id    int    `json:"id, string"`}
---------------------------------------------------------------------------------------------------
If we want to export our JSON prettily formatted with indentation, we can use theMarshallIndent function,
this allows you to pass an additional parameter of string tospecify what you would like the indent to be.
Two spaces right, not a tab?

func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)
-----------------------------------------------------------------------------------------------------------
The ResponseWriter is an interface that defines three methods:

// Returns the map of headers which will be sent by the
// WriteHeader method.
Header()

// Writes the data to the connection. If WriteHeader has not
// already been called then Write will call
// WriteHeader(http.StatusOK).
Write([]byte) (int, error)

// Sends an HTTP response header with the status code.
WriteHeader(int)
------------------------------------------------------------------------------------------------------------
If we have a ResponseWriter interface, how can we use this with fmt.Fprint(w io.Writer, a ...interface{})?

This method requires a Writer interface as a parameter and we have a ResponseWriter interface.
If we look at the signature for Writer we can see that it is:

Write(p []byte) (n int, err error)

Because the ResponseWriter interface implements this method,
it also satisfies the interface Writer and therefore any object that implements ResponseWriter can be passed to any function that expects Writer.
--------------------------------------------------------------------------------------------------------------
The encoding/json package has a function called NewEncoder this returns us an Encoderobject that can be used to write 
JSON straight to an open writer and guess what; we haveone of those:

func NewEncoder(w io.Writer) *Encoder

So instead of storing the output of Marshal into a byte array, we can write it straight to the HTTP response.
---------------------------------------------------------------------------------------------------------------
Applying similar techniques that we learned in the previous section to write JSON,
readingJSON is just as easy. To decode JSON into a stuct field the encoding/json packageprovides us with the Unmarshal function:

func Unmarshal(data []byte, v interface{}) error
----------------------------------------------------------------------------------------------------------------
To access the JSON sent with the request we need to take a look at the http.Requestobject passed to our handler

type Requests struct {
    ...
      // Method specifies the HTTP method (GET, POST, PUT, etc.).
      Method string
      
      // Header contains the request header fields received by the server. The type Header is a link to map[string] []string.
      Header Header
      
      // Body is the request's body.
      Body io.ReadCloser
      ...
      }
-----------------------------------------------------------------------------------------------------------------
The JSON that has been sent with the request is accessible in the Body field. 
Body implements the interface io.ReadCloser as a stream and does not return a []byte or astring.
If we need the data contained in the body, we can simply read it into a byte array,as shown in the following example:

30 body, err := ioutil.ReadAll(r.Body)
31 if err != nil {
    32     http.Error(w, "Bad request", http.StatusBadRequest)
    33     return
    34 }
---------------------------------------------------------------------------------------------------------------------
explanation of reading_writing_json_7

This is a simple Go program that starts an HTTP server on port 8080 and listens for requests on the /helloworld endpoint.
The server uses a validationHandler to validate incoming requests and a helloWorldHandler to handle valid requests.

The main function starts by defining the port number on which the server will listen.
It then creates a new helloWorldHandler and wraps it in a validationHandler using the newValidationHandler function.
The resulting handler is then registered with the HTTP server to handle requests on the /helloworld endpoint.

The validationHandler is responsible for validating incoming requests.
It does this by implementing the ServeHTTP method of the http.Handler interface.
This method is called by the HTTP server whenever a request is received on the /helloworld endpoint.

The ServeHTTP method of the validationHandler starts by creating a new helloWorldRequest object and 
using a JSON decoder to decode the request body into this object. If an error occurs during decoding,
the method returns an HTTP 400 Bad Request response to the client.

If the request is successfully decoded, the ServeHTTP method of the validationHandler calls
the ServeHTTP method of its next handler, which is the helloWorldHandler.
This passes control to the helloWorldHandler, which is responsible for handling valid requests.

The helloWorldHandler implements the ServeHTTP method of the http.Handler interface.
This method creates a new helloWorldResponse object with a message of “Hello” and 
uses a JSON encoder to encode this object into the response body.
The resulting response is then sent back to the client.

Overall, this program demonstrates how to create an HTTP server in Go, 
how to use handlers to validate and process incoming requests, and how to encode and decode JSON data in request and 
response bodies.
----------------------------------------------------------------------------------------------------------------------
The Context() method gives us access to a context.Context structure which is always non nil as it is populated
when the request is originally created. For inbound requests the http.
Server manages the lifecycle of the context automatically cancelling it when the client connection closes. 
For outbound requests, Context controls cancellation, by this we mean that if we cancel the Context() method 
we can cancel the outgoing request.
-------------------------------------------------------------------------------------------------------------------
The reason we are not just using a simple string is that context often flows across packagesand 
if we just used string then we could end up with a key clash where one package withinyour control is writing a name key 
and another package which is outside of your control is also using the context and writing a key called name, 
in this instance the second package would inadvertently overwrite your context value. 
By declaring a package level typevalidationContextKey and using this we can ensure that we avoid these collisions:
--------------------------------------------------------------------------------------------------------------------------
(https://github.com/NYTimes/gziphandler)
-----------------------------------------------------------------------------------------------------------------------------
Microsoft has provided an excellent API guidelines resource, you can read more about 
returning errors by looking at the following link:
https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#51-errors
--------------------------------------------------------------------------------------------------------
Accessing APIs from JavaScript
Web browsers implement a sandbox mechanism that restricts resources in one domain from
accessing resources in another. For example, you may have an API that allows the
modification and retrieval of user data and a website that provides an interface for this API.
If the browser did not implement the "same-origin policy" and assuming the user did not
log out of their session then it would be possible for a malicious page to send a request to
the API and modify it without you knowing.To get around this, there are two methods that can be
implemented by your microservice toallow this access, JSONP which stands for (JSON with Padding) 
and CORS (Cross-OriginResource Sharing).
-------------------------------------------------------------------------------------------------------
https://semver.org/
-------------------------------------------------------------------------------------------------------
https://www.openapis.org/
https://swagger.io/
-------------------------------------------------------------------------------------------------------
https://www.redhat.com/en/blog/history-containers
When you execute a docker run the first thing the engine does is check to see if you have
the image installed locally. If it doesn't then it connects to the default registry,
in this case, https://hub.docker.com/ to retrieve it.
-------------------------------------------------------------------------------------------------------
https://www.weave.works/
https://www.tigera.io/project-calico/
-------------------------------------------------------------------------------------------------------
Bad Practice:
RUN apt-get update
RUN apt-get install -y wget
RUN apt-get install -y curl
RUN apt-get install -y nginx

Good Practice:
RUN apt-get update && \  
    apt-get install -y wget curl nginx
------------------------------------------------------------------------------------------------------
https://docs.docker.com/engine/reference/builder/#/dockerignore-file